{"version":3,"sources":["hooks/useJsonFetch.js","components/LoaderCentered.js","components/Error.js","components/Post.js","components/Posts.js","components/Main.js","components/Form.js","components/NewPost.js","components/PostPage.js","App.js","reportWebVitals.js","index.js"],"names":["useJsonFetch","url","opts","useState","data","setData","isLoading","setIsLoading","error","setError","useEffect","a","fetch","response","ok","Error","statusText","json","fetchData","LoaderCentered","className","Loader","active","inline","message","style","color","defaultProps","Post","post","navigate","useNavigate","onClick","id","aria-hidden","moment","created","fromNow","content","Posts","process","map","el","Main","type","Form","onSubmit","onClose","form","setForm","e","preventDefault","name","value","onChange","target","prev","placeholder","NewPost","method","headers","body","JSON","stringify","then","PostPage","isEdit","setEdit","useParams","findPost","find","App","basename","path","exact","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.35aa0e2a.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\nexport default function useJsonFetch(url, opts = null) {\n  const [data, setData] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setIsLoading(true);\n      try {\n        const response = await fetch(url, opts);\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n\n        const json = await response.json();\n        setData(json);\n        setError(null);\n      } catch (e) {\n        setError(e);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    fetchData();\n  }, [url, opts]);\n\n  return [data, isLoading, error];\n}\n","import React from 'react';\nimport { Loader } from 'semantic-ui-react';\n\nconst LoaderCentered = () => (\n  <div className=\"Loader__container\">\n    <Loader active inline=\"centered\" />\n  </div>\n);\n\nexport default LoaderCentered;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Error({ message }) {\n  return (\n    <div\n      className=\"Error\"\n      style={{ color: 'red' }}\n    >\n      {message}\n    </div>\n  );\n}\n\nError.defaultProps = {\n  message: 'Произошла ошибка при загрузке данных!',\n};\n\nError.propTypes = {\n  message: PropTypes.string,\n};\n\nexport default Error;\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport 'moment/locale/ru';\n\nfunction Post({ post }) {\n  const navigate = useNavigate();\n  const onClick = () => navigate(`/posts/${post.id}`);\n\n  return (\n    <article\n      className=\"Post\"\n      onClick={onClick}\n      aria-hidden=\"true\"\n    >\n      <div className=\"Post__content\">\n        <header className=\"Post__header\">\n          <div className=\"Post-creator__img\" />\n          <div className=\"Post__about\">\n            <div className=\"Post-creator__name\">Иван Иванов</div>\n            <span className=\"Post-creator__info\">Основатель группы</span>\n            <span className=\"Post__time\">{moment(post.created).fromNow()}</span>\n          </div>\n        </header>\n        <div className=\"Post__text\">\n          <p>{post.content}</p>\n        </div>\n      </div>\n    </article>\n  );\n}\n\nPost.propTypes = {\n  post: PropTypes.exact({\n    id: PropTypes.number,\n    content: PropTypes.string,\n    created: PropTypes.number,\n  }).isRequired,\n};\n\nexport default Post;\n","import React from 'react';\nimport useJsonFetch from '../hooks/useJsonFetch';\nimport LoaderCentered from './LoaderCentered';\nimport Error from './Error';\nimport Post from './Post';\n\nfunction Posts() {\n  const [data, isLoading, error] = useJsonFetch(`${process.env.REACT_APP_DATA_URL}`);\n\n  return (\n    <section className=\"Posts\">\n      { isLoading && <LoaderCentered /> }\n      { error && <Error /> }\n      { !isLoading && data && data.map((el) => (\n        <Post post={el} key={el.id} />\n      )) }\n    </section>\n  );\n}\n\nexport default Posts;\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Posts from './Posts';\n\nexport default function Main() {\n  const navigate = useNavigate();\n  const onAdd = () => navigate('/posts/new');\n\n  return (\n    <main className=\"Main\">\n      <section className=\"Main-create__container\">\n        <button\n          className=\"Main-create__button button\"\n          type=\"button\"\n          onClick={onAdd}\n        >\n          Создать пост\n        </button>\n      </section>\n\n      <Posts />\n    </main>\n  );\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Form({ post, onSubmit, onClose }) {\n  const [form, setForm] = useState({ content: post.content });\n  const onHandleSubmit = (e) => {\n    e.preventDefault();\n    if (!form.content) return;\n    onSubmit(form.content);\n  };\n\n  const onChange = ({ target }) => {\n    setForm((prev) => ({ ...prev, [target.name]: target.value }));\n  };\n\n  return (\n    <>\n      <button\n        className=\"Form__close\"\n        type=\"button\"\n        onClick={onClose}\n      >\n        ✘\n      </button>\n\n      <form className=\"Form\" onSubmit={onHandleSubmit}>\n        <div className=\"Form__group\">\n          <textarea\n            className=\"Form__textbox\"\n            name=\"content\"\n            value={form.content}\n            onChange={onChange}\n            placeholder=\"Введите текст\"\n          />\n        </div>\n\n        <button className=\"Form__button button\" type=\"submit\">\n          Опубликовать\n        </button>\n      </form>\n    </>\n  );\n}\n\nForm.defaultProps = {\n  post: {\n    content: '',\n  },\n};\n\nForm.propTypes = {\n  post: PropTypes.shape({\n    content: PropTypes.string,\n  }),\n  onSubmit: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","import React from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport Form from './Form';\n\nexport default function NewPost() {\n  const navigate = useNavigate();\n  const onClose = () => navigate('/');\n  const onSubmit = (content) => {\n    fetch(process.env.REACT_APP_DATA_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        id: 0,\n        content,\n      }),\n    })\n      .then(() => onClose());\n  };\n\n  return (\n    <div className=\"NewPost__container\">\n      <Form onSubmit={onSubmit} onClose={onClose} />\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport useJsonFetch from '../hooks/useJsonFetch';\nimport Post from './Post';\nimport Form from './Form';\n\nexport default function PostPage() {\n  const [isEdit, setEdit] = useState(false);\n  const [data] = useJsonFetch(`${process.env.REACT_APP_DATA_URL}`);\n  const { id } = useParams();\n\n  const navigate = useNavigate();\n  const onClose = () => navigate('/');\n\n  const onEdit = () => setEdit(true);\n  const findPost = () => data.find((el) => el.id === +(id));\n\n  const onDelete = () => {\n    fetch(`${process.env.REACT_APP_DATA_URL}/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then(() => onClose());\n  };\n\n  const onSubmit = (content) => {\n    fetch(process.env.REACT_APP_DATA_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        id: +id,\n        content,\n      }),\n    })\n      .then(() => onClose());\n  };\n\n  return (\n    <div className=\"PostPage\">\n      { data && !isEdit && (\n        <>\n          <Post post={findPost()} />\n\n          <div className=\"PostPage__control\">\n            <button\n              className=\"PostPage__button_edit button\"\n              type=\"submit\"\n              onClick={onEdit}\n            >\n              Изменить\n            </button>\n            <button\n              className=\"PostPage__button_delete button\"\n              type=\"submit\"\n              onClick={onDelete}\n            >\n              Удалить\n            </button>\n          </div>\n        </>\n      ) }\n\n      { data && isEdit && (\n        <div className=\"PostPage__edit\">\n          <Form\n            post={findPost()}\n            onSubmit={onSubmit}\n            onClose={onClose}\n          />\n        </div>\n      ) }\n    </div>\n  );\n}\n","import React from 'react';\nimport {\n  BrowserRouter as Router, Routes, Route,\n} from 'react-router-dom';\nimport './App.css';\nimport Main from './components/Main';\nimport NewPost from './components/NewPost';\nimport PostPage from './components/PostPage';\n\nexport default function App() {\n  return (\n    <Router basename=\"/ra_9.2_crud\">\n      <div className=\"App__container\">\n        <div className=\"App\">\n          <Routes>\n            <Route path=\"/\" exact element={<Main />} />\n            <Route path=\"/posts/new\" element={<NewPost />} />\n            <Route path=\"/posts/:id\" element={<PostPage />} />\n          </Routes>\n        </div>\n      </div>\n    </Router>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'semantic-ui-css/semantic.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}